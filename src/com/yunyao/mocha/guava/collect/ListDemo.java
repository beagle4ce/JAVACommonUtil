package com.yunyao.mocha.guava.collect;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.junit.Test;

import com.google.common.collect.Lists;
import com.google.common.collect.Sets;
import com.google.common.collect.Sets.SetView;

/**
 * 
 * @author gf
 *
 */
public final class ListDemo {
	
	/**
	 * 更简便的new
	 */
	@Test
	public void newList() {
		ArrayList<String> list = Lists.newArrayList("1", "2");
		System.out.println(list);
		
		HashSet<String> set = Sets.newHashSet("1", "2");
		System.out.println(set);
		
		List<List<String>> lists = Lists.partition(Lists.newArrayList("1", "2", "3", "4", "5"), 2);
		System.out.println(lists);
	}
	
	/**
	 * List分割
	 */
	@Test
	public void partition() {
		List<String> list = Lists.newArrayList("1", "2", "3", "4", "5");
		List<List<String>> batchs = Lists.partition(list, 2);
		// 得到 [[1, 2], [3, 4], [5]], 数据量大时, 分批次执行SQL的时候很有用
		System.out.println(batchs);
	}
	
	@Test
	public void difference() {
		Set<String> s1 = Sets.newHashSet("1", "2", "3");
		Set<String> s2 = Sets.newHashSet("3", "4", "5");
		SetView<String> result = Sets.difference(s1, s2);
		System.out.println(s1);
		System.out.println(s2);
		// s1 - s2 = [2, 1]
		System.out.println(result);
	}
	
	@Test
	public void intersection() {
		Set<Integer> s1 = Sets.newHashSet(25584,29248,32619,32620,32621,32622,32623,32624,33043,34566,35223,37111,37265,37268,37279,37284,37288,37290,37293,37296,38466,39291,39292,39294,39420,39421,39422,39423,39424,39425,39427,39428,39661,39807,40358,40398,41252,41398,41399,42174,42175,42176,42178,42181,42182,42183,42184,42185,42187,42189,42190,42191,42192,42193,42194,42195,42196,42197,42198,42199,42200,42202,42203,42205,42207,42208,42320,42531,42871,43056,43062,43066,43071,43073,43079,43160,43188,43195,43392,43456,43457,43602,43639,43646,43673,43677,43680,44034,45591,45727,45729,45772,45775,45785,45797,45845,45851,45871,45884,45887,45888,45924,45925,45926,45951,45953,45968,45980,45985,45988,46005,46026,46036,46067,46079,46089,46090,46109,46140,46142,46143,46165,46184,46201,46244,46252,46265,46282,46285,46289,46298,46306,46309,46310,46321,46322,46356,46374,46381,46385,46387,46408,46434,46437,46452,46494,46501,46516,46518,46519,46548,46568,46573,46581,46614,46615,46616,46618,46619,46620,46621,46622,46630,46653,46661,46695,46776,46847,46864,46905,46907,46909,46911,46914,46915,46917,46919,46921,46923,46925,46927,46929,46932,46935,46947,46949,46952,46955,46978,46996,46997,47003,47005,47074,47084,47095,47111,47124,47125,47130,47138,47142,47150,47166,47180,47214,47224,47234,47253,47261,47264,47300,47308,47309,47316,47386,47407,47414,47421,47426,47456,47516,47525,47576,47599,47618,47628,47638,47659,47675,47705,47716,47735,47753,47757,47787,47825,47857,47865,47875,47888,47891);
		Set<Integer> s2 = Sets.newHashSet(25584,29248,32619,32620,32621,32622,32623,32624,37265,37268,37279,37284,37288,37290,37293,37296,39420,39421,39422,39423,39424,39425,39427,39428,40358,42174,42175,42176,42178,42181,42182,42183,42184,42185,42187,42189,42190,42191,42192,42193,42194,42195,42196,42197,42198,42199,42200,42202,42203,42205,42207,42208,42320,43056,43062,43066,43071,43079,43287,43392,43602,43639,43646,43673,43677,43680,45798,45837,45854,45874,45890,45915,45976,46003,46015,46043,46090,46106,46132,46180,46182,46210,46216,46275,46324,46326,46378,46441,46516,46685,46828,46854,46905,46907,46909,46911,46914,46915,46917,46919,46921,46923,46925,46927,46929,46932,46988,46995,46996,46997,47003,47005,47028,47034,47037,47087,47142,47216,47221,47279,47297,47313,47318,47369,47460,47474,47555,47606,47607,47610,47793,47832,47866);
		SetView<Integer> result = Sets.intersection(s1, s2);
		// 得到[3, 2], 交集
		System.out.println(result);
	}
	
	@Test
	public void union() {
		Set<String> s1 = Sets.newHashSet("1", "2", "3");
		Set<String> s2 = Sets.newHashSet("2", "3", "4");
		SetView<String> result = Sets.union(s1, s2);
		// 得到[3, 2, 1, 4]
		System.out.println(result);
	}
}
